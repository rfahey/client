<procs>
  <proc name='notification_ccard_topup'>
    <param name='usage_object'/>
    <param name='bucket_object'/>

    <run_once>
      <if>
        <condition>GLOBAL.notification_queue eq ''</condition>
        <then>

          <print>'Lookup notification_queue in database...'</print>

          <spawn>
            <object_type>'NOTIFICATION_QUEUE'</object_type>
            <object_id>GLOBAL.notification_queue</object_id>
          </spawn>
          <index_insert>
            <index>'GLOBAL_OBJECTS'</index>
            <field name="object_id">GLOBAL.notification_queue</field>
          </index_insert>

          <do>OBJECT(GLOBAL.notification_queue).prefetch_count='100'</do>
          <do>OBJECT(GLOBAL.notification_queue).auto_ack='0'</do>
          <do>OBJECT(GLOBAL.notification_queue).dequeue_auto_ack='1'</do>
          <do>OBJECT(GLOBAL.notification_queue).dequeue_timeout_ms='100'</do>

          <!--<print>'GLOBAL.logical_cluster='~GLOBAL.logical_cluster</print>-->

          <do>
            TEMP.query= "select q.queue, n.rabbitmq_nodename,n.username,n.password,n.server,n.port,n.vhost
            from mvm_rabbitmq_map m
            inner join t_rabbitmq_queues q on m.queue=q.queue
            inner join t_rabbitmq_nodes n on q.rabbitmq_nodename=n.rabbitmq_nodename
            where m.queue_type='notification' and m.logical_cluster=$${GLOBAL.logical_cluster}
            "
          </do>
          <db_select>
            <query>TEMP.query</query>
            <cursor>TEMP.csr</cursor>
            <then>
              <do>TEMP.rabbitmq_nodename=OBJECT(TEMP.csr).rabbitmq_nodename</do>
              <do>TEMP.username=nvl(OBJECT(TEMP.csr).username,'guest')</do>
              <do>TEMP.password=nvl(OBJECT(TEMP.csr).password,'guest')</do>
              <!--<print>'got password='~TEMP.password</print>
            <print>'got rabbitmq_nodename='~TEMP.rabbitmq_nodename</print>-->
              <if>
                <condition>starts_with(TEMP.password,'encrypted:')</condition>
                <then>
                  <do>TEMP.encrypted=substr(TEMP.password,10)</do>
                  <!--<print>'got encrypted=['~TEMP.encrypted~']'</print>-->
                  <do>TEMP.password=decrypt(TEMP.encrypted)</do>
                  <!--<print>'got decrypted=['~TEMP.password~']'</print>-->
                </then>
                <else>
                  <do>TEMP.encrypted='encrypted:'~encrypt(TEMP.password)</do>
                  <!--<print>'got encrypted=['~TEMP.encrypted~']'</print>-->
                  <db_execute>
                    <statement>
                      'update t_rabbitmq_nodes set password=$${TEMP.encrypted} where rabbitmq_nodename=$${TEMP.rabbitmq_nodename} and password=$${TEMP.password}'
                    </statement>
                    <num_rows>TEMP.num_rows</num_rows>
                  </db_execute>
                  <if>
                    <condition>TEMP.num_rows</condition>
                    <then>
                      <print>'Looks like we encrypted the queue password.'</print>
                    </then>
                  </if>
                </else>
              </if>

              <do>TEMP.server=nvl(OBJECT(TEMP.csr).server,'localhost')</do>
              <do>TEMP.port=nvl(OBJECT(TEMP.csr).port,'5672')</do>
              <do>TEMP.vhost=nvl(OBJECT(TEMP.csr).vhost,'%2f')</do>
              <do>OBJECT(GLOBAL.notification_queue).queue=OBJECT(TEMP.csr).queue</do>
              <do>
                OBJECT(GLOBAL.notification_queue).uri=
                'amqp://'
                ~ TEMP.username
                ~ ':' ~TEMP.password
                ~ '@' ~TEMP.server
                ~ ':' ~TEMP.port
                ~ '/' ~TEMP.vhost
              </do>
            </then>
            <else>
              <fatal>'Error, could not find entry for queue_type=[notification] query=['~TEMP.query~'] logical_cluster=['~GLOBAL.logical_cluster~']'</fatal>
            </else>
          </db_select>

        </then>
        <else>
          <print>'Using preset notification_queue...'</print>
        </else>
      </if>

      <print>'notification queue:'~dump_object(GLOBAL.notification_queue)</print>

    </run_once>



    <do>
      TEMP.my_message="<![CDATA[
  <Request NeedsTimeout='true'>
      <MessageType>TopCreditCard</MessageType>
      <Body>
        <!-- all custom request fields go here -->
        <AccountIdentifier>"~OBJECT(TEMP.bucket_object).id_acc~"</AccountIdentifier>
        <AccountType>Residential</AccountType>
        <Amount>"~OBJECT(TEMP.bucket_object).ccard_topup_amount~"</Amount>
        <Currency>USD</Currency>
        <TransactionDate>20120904 13:45:00</TransactionDate>
        <ProcessingNode>"~GLOBAL.node_id~"</ProcessingNode>
        <IdAcc>"~OBJECT(TEMP.bucket_object).id_acc~"</IdAcc>
        <DecisionUniqueId>"~OBJECT(TEMP.bucket_object).decision_unique_id~"</DecisionUniqueId>
      </Body>
  </Request>
            ]]>"
    </do>
    
    <print>'enqueuing ['~TEMP.my_message~']'</print>
    <rabbitmq_enqueue>
      <rabbitmq_object>GLOBAL.notification_queue</rabbitmq_object>
      <using_string>TEMP.my_message</using_string>
    </rabbitmq_enqueue>
    
  </proc>
</procs>
