<procs>
  <proc name='bg_process_aqg_change'>
    <param name='new_row_object'/>

    <object_delta_get_original>
      <object_id>TEMP.new_row_object</object_id>
      <field_name>'id_acc'</field_name>
      <value>TEMP.old_id_acc</value>
    </object_delta_get_original>

    <object_delta_get_original>
      <object_id>TEMP.new_row_object</object_id>
      <field_name>'account_qualification_group'</field_name>
      <value>TEMP.old_account_qualification_group</value>
    </object_delta_get_original>

    
    <date_add>
      <input>OBJECT(TEMP.new_row_object).end_date</input>
      <unit>'DD'</unit>
      <increment>90</increment>
      <output>TEMP.expiration_date</output>
    </date_add>

    <db_select>
      <login_object>GLOBAL.target_login</login_object>
      <query type='sql'>
        "select getdate() system_date"
      </query>
      <query type='oracle'>
        "select sysdate system_date from dual"
      </query>
      <cursor>TEMP.date_csr</cursor>
      <then>
        <do>TEMP.system_date = OBJECT(TEMP.date_csr).system_date</do>
      </then>
    </db_select>

    <do>TEMP.remove_expired = 0</do>
    <if>
      <condition>TEMP.system_date LT TEMP.expiration_date</condition>
      <then>
        <do>TEMP.remove_expired = 1</do>
      </then>
    </if>

    <if>
      <condition>TEMP.old_account_qualification_group ne '' and (TEMP.old_id_acc ne OBJECT(TEMP.new_row_object).id_acc or TEMP.old_account_qualification_group Ne OBJECT(TEMP.new_row_object).account_qualification_group)</condition>
      <then>
        <call_proc_for_current_object>
          <name>'bg_remove_aqg_from_boundary_group'</name>
          <param name='id_acc'>TEMP.old_id_acc</param>
          <param name='account_qualification_group'>TEMP.old_account_qualification_group</param>
          <param name='boundary_group_id'>TEMP.old_aqg_boundary_group</param>
          <param name='force_remove'>0</param>
        </call_proc_for_current_object>
      </then>
    </if>

    <if>
      <condition>TEMP.remove_expired eq 1 TEMP.new_row_object ne ''</condition>
      <then>
        <call_proc_for_current_object>
          <name>'bg_remove_aqg_from_boundary_group'</name>
          <param name='id_acc'>OBJECT(TEMP.new_row_object).id_acc</param>
          <param name='account_qualification_group'>OBJECT(TEMP.new_row_object).account_qualification_group</param>
          <param name='boundary_group_id'>TEMP.new_aqg_boundary_group</param>
          <param name='force_remove'>0</param>
        </call_proc_for_current_object>
      </then>
    </if>
    
    <if>
      <condition>TEMP.remove_expired ne 1 and TEMP.new_row_object ne '' and TEMP.old_id_acc ne OBJECT(TEMP.new_row_object).id_acc or TEMP.old_account_qualification_group Ne OBJECT(TEMP.new_row_object).account_qualification_group)</condition>
      <then>
        <call_proc_for_current_object>
          <name>'bg_add_aqg_to_boundary_group'</name>
          <param name='id_acc'>OBJECT(TEMP.new_row_object).id_acc</param>
          <param name='account_qualification_group'>OBJECT(TEMP.new_row_object).account_qualification_group</param>
          <param name='force_lock'>0</param>
          <param name='boundary_group_id'>TEMP.new_aqg_boundary_group</param>
        </call_proc_for_current_object>
      </then>
    </if>

    <call_proc_for_current_object>
      <name>'bg_unlock_boundary_groups'</name>
      <param name='got_unlock'>TEMP.got_unlock</param>
    </call_proc_for_current_object>

  </proc>
</procs>


