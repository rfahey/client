
<!-- This group of proc's determines...  -->
<!-- The main proc is generate_work_for_interval. -->
<!-- This proc uses the map-reduce model for using slave -->
<!-- processes to help determine the work to do. -->

<procs>

  <!-- ===================================================================== -->
  <!--                                                                       -->
  <!-- Determine the work to be done using map reduce.                       -->
  <!--                                                                       -->
  <!-- Inputs:                                                               -->
  <!--     id_interval  The interval that we are interested in.              -->
  <!--                                                                       -->
  <!-- Results:                                                              -->
  <!--                                                                       -->
  <!-- ===================================================================== -->

  <proc name='generate_sub_work_for_system'>

    <!-- Instantiate structures that are used by this file. -->
    <initialize>
      <print>'init generate_sub_work_for_system'</print>



      <define_memory_index>
        <index>'ACC_SUB_TO_PRODUCE'</index>
        <key_field>'id_acc'</key_field>
      </define_memory_index>
      
    <!--<define_memory_index synchronized='true'>
        <index>'GLOBAL_PARAMS'</index>
        <key_field>'param_name'</key_field>
        <field>'param_value'</field>
      </define_memory_index>-->

    </initialize>

    <debug>'Determining what work needs to be done for interval '~TEMP.id_interval</debug>

    <index_clear>
      <index>'ACC_SUB_TO_PRODUCE'</index>
    </index_clear>
    <!-- DOC: We clear BUCKET_CHILDREN before it's created here. -->
    <!-- DOC: It doesn't hurt anything, although it makes code look weird. -->
    <!-- DOC: "indices" are added to the GLOBAL object -->
    <!-- DOC: creation of "indeces" belongs in initialization blocks, but this is not required -->
    <!-- DOC: These are multimaps -->
    
    <index_clear>
      <index>'GLOBAL_PARAMS'</index>
    </index_clear>
    <index_insert>
      <index>'GLOBAL_PARAMS'</index>
      <field name='param_name'>'eop_mode'</field>
      <field name='param_value'>TEMP.eop_mode</field>
    </index_insert>
    <index_insert>
      <index>'GLOBAL_PARAMS'</index>
      <field name='param_name'>'id_interval'</field>
      <field name='param_value'>TEMP.id_interval</field>
    </index_insert>
    
    
    

    <!-- DOC: what can the express of a "do" be? assignment -->
    <do>GLOBAL.producer_queue_length=2</do>
    <do>GLOBAL.reduce_ctr=0</do>
    

    <!-- QUESTION: true? -->
    <!-- Table AGG_BUNDLE_POS is used to hold the PO ids  -->
    <!-- that reference PTs used by the decisions we are processing. -->
    <!-- Used only locally by this file. -->

    <!-- DOC: dynamic, string is evaluated every time. -->
    <db_execute_dynamic>
      <!-- DOC: namespaces (AMP/Global/anywhere) -->
      <login_object>GLOBAL.target_login</login_object>
      <statement type="oracle">
        "truncate table AGG_BUNDLE_POS"
      </statement>
      <statement type="sql">
        "truncate table AGG_BUNDLE_POS"
      </statement>
      <num_rows>TEMP.num_rows</num_rows>
    </db_execute_dynamic>

	<if>
	  <condition>GLOBAL.my_pt_list ne ''</condition>
	  <then>
    <!-- Fill up table AGG_BUNDLE_POS -->
    <!-- Put the PO ids we are interested in into agg_bundle_pos -->
    <!-- We already have a list of PTs that the decisions want -->
    <!-- so look for which PO's are using them. -->

    <debug>'Determining the POs that reference the parameter tables used in decisions.'</debug>
		<db_execute_dynamic>
		  <login_object>GLOBAL.target_login</login_object>
		  <statement type="oracle">
			"insert into AGG_BUNDLE_POS select distinct id_po FROM t_pl_map WHERE id_paramtable IN("~GLOBAL.my_pt_list~") AND id_sub IS NULL"
		  </statement>
		  <statement type="sql">
			"insert into AGG_BUNDLE_POS select distinct id_po FROM t_pl_map WHERE id_paramtable IN("~GLOBAL.my_pt_list~") AND id_sub IS NULL"
		  </statement>
		  <num_rows>TEMP.num_rows</num_rows>
		</db_execute_dynamic>
	  </then>
	  <else>
        <debug>'No parameter tables configured with decisions.'</debug>
	  </else>
	</if>

    <!-- Do the initial seeding for map-reduce: -->
    <!-- Fill up map ACC_SUB_TO_PRODUCE with initial accounts to process -->
    <!-- We are only getting accounts that are subscribed to at least -->
    <!-- one of the POs we are interested in. -->
    <debug>'Determining the accounts that own decisions (reference a PO with decision PT).'</debug>
    <db_select>
      <login_object>GLOBAL.target_login</login_object>
      <query type='sql'>
        "SELECT isnull(c.id_acc, d.id_acc) id_acc FROM agg_bundle_pos b
        inner join t_sub c on b.id_po = c.id_po
        left outer join t_gsubmember d on c.id_group = d.id_group
        "
      </query>
      <query type='oracle'>
        "SELECT nvl(c.id_acc, d.id_acc) id_acc FROM agg_bundle_pos b
        inner join t_sub c on b.id_po = c.id_po
        left outer join t_gsubmember d on c.id_group = d.id_group
        "
      </query>
      <cursor>TEMP.id_acc_list</cursor>
      <loop>
        <index_insert_if_none>
          <index>'ACC_SUB_TO_PRODUCE'</index>
          <field name='id_acc'>OBJECT(TEMP.id_acc_list).id_acc</field>
        </index_insert_if_none>
      </loop>
    </db_select>

    <!-- Clear the contents of maps that exist on several slaves -->
    <!-- and wait until all slaves complete this task -->
    <!--<slave_node_id_select>
      <cursor>TEMP.csr</cursor>
      <loop>
        <do>TEMP.slave_id=OBJECT(TEMP.csr).node_id</do>
        <remote_queue_proc>
          <name>'clear_local_structs'</name>
          <process_id>TEMP.slave_id</process_id>
          <batch_id>TEMP.my_batch_id</batch_id>
          <new_remote_object_type>'REMOTE_EMPTY'</new_remote_object_type>
        </remote_queue_proc>
        <wait_for_batch_complete>TEMP.my_batch_id</wait_for_batch_complete>

        <push_index>
          <process_id>TEMP.slave_id</process_id>
          <clear_source>0</clear_source>
          <source>
            <index>'GLOBAL_PARAMS'</index>
          </source>
          <target>
            <index>'GLOBAL_PARAMS'</index>
          </target>
        </push_index>

        <remote_queue_proc>
          <name>'reset_global_context'</name>
          <process_id>TEMP.slave_id</process_id>
          <batch_id>TEMP.my_batch_id</batch_id>
          <new_remote_object_type>'REMOTE_EMPTY'</new_remote_object_type>
        </remote_queue_proc>
        <wait_for_batch_complete>TEMP.my_batch_id</wait_for_batch_complete>
        
      </loop>
    </slave_node_id_select>-->

    <debug>'Distributing the work of creating decision instances for accounts to slaves.'</debug>
    <debug>'The distribution of the work is based on account.'</debug>

    <!--<set_server_mode_on/>

    <startup_slaves>
      <slave_count>'*'</slave_count>
      <num_started>GLOBAL.slave_count</num_started>
    </startup_slaves>-->

    <!--<sleep>5000</sleep>-->

    <!-- Now we need to process the initial accounts in ACC_SUB_TO_PRODUCE to -->
    <!-- to see if decision configuration causes other accounts to be pulled -->
    <!-- Rather than do this locally, we are going to use the slaves in the -->
    <!-- cluster divide load by account. --> 

    <!-- DOC: 'ms' times just this pass, 'totalms' accumulates all passes -->
    <!-- DOC: deprecated by stopwatch -->
    <!--<time ms='TEMP.ms'>
      <map_reduce>
        --><!-- how much to produce in advance --><!--
        <producer_queue_length>GLOBAL.producer_queue_length</producer_queue_length>
        <producer_proc>
          <name>'produce_sub_aqg_work'</name>
        </producer_proc>
        <consumer_proc>
          <name>'consume_sub_aqg_work'</name>
          <include_object_fields_in_output>1</include_object_fields_in_output>
        </consumer_proc>
        <reducer_proc>
          <name>'reduce_sub_aqg_work'</name>
        </reducer_proc>
      </map_reduce>
      --><!--<print>'AFTER MAP_REDUCE'</print>--><!--
    </time>-->

    <index_select_keys>
      <index>'ACC_SUB_TO_PRODUCE'</index>
      <cursor>TEMP.csr</cursor>
      <loop>
        <call_proc_for_current_object>
          <name>'get_sub_agg_decisions'</name>
          <param name="id_acc">OBJECT(TEMP.csr).id_acc</param>
        </call_proc_for_current_object>
        <index_clear>
          <index>'OVERLAID_CHILD_ACCOUNT_TABLES'</index>
        </index_clear>
        <index_clear>
          <index>'ACC_QUAL_GROUPS'</index>
        </index_clear>
        <index_clear>
          <index>'ACCOUNT_CACHE'</index>
        </index_clear>
      </loop>
    </index_select_keys>
    
  </proc>

  <!-- ===================================================================== -->
  <!-- PRODUCER                                                              -->
  <!--                                                                       -->
  <!-- This the producer in the map-reduce model.  This interates through -->
  <!-- the initial accounts, passing them out to the slaves.   -->
  <!-- ===================================================================== -->
  <proc name='produce_sub_aqg_work'>
    <param name='pipe_cursor'/>


    <!-- Distributing the account ids to the slaves for processing -->
    <!-- The slaves may hand us back more accounts to process. -->
    <!-- This proc will end when we have finished looping through the accounts -->
    <!-- AND all the slaves have ended.  -->

    <!-- DOC: the MapReduce engine terminates this proc when the proc -->
    <!-- DOC: has reported it's done (by pipe of null) and all slaves are done. -->
    <!-- DOC: <else> executes if there were no loop elements -->
        <index_select_keys>
          <index>'ACC_SUB_TO_PRODUCE'</index>
          <cursor>TEMP.csr</cursor>
          <loop>
            <pipe_row>TEMP.csr</pipe_row>
          </loop>
        </index_select_keys>
    <debug>'Done passing work to the slaves for instantiating decisions.'</debug>
  </proc>

  <proc name='consume_sub_aqg_work'>
    <debug>'This slave is going to create all decisions instances needed for the decisions owned by account ['~OBJECT.id_acc~']'</debug>
    <call_proc_for_current_object>
      <name>'get_sub_agg_decisions'</name>
      <param name="id_acc">OBJECT.id_acc</param>
    </call_proc_for_current_object>
    <index_clear>
      <index>'OVERLAID_CHILD_ACCOUNT_TABLES'</index>
    </index_clear>
    <index_clear>
      <index>'ACC_QUAL_GROUPS'</index>
    </index_clear>
    <index_clear>
      <index>'ACCOUNT_CACHE'</index>
    </index_clear>   
  </proc>


  <proc name='reduce_sub_aqg_work'>
    <run_once>
      <do>GLOBAL.my_reduce_ctr = '0'</do>
    </run_once>
    <do>GLOBAL.reduce_ctr+=1</do>
    <debug>'reducing id_acc='~OBJECT.id_acc~', total_reduce_ctr='~GLOBAL.reduce_ctr</debug>
  </proc>

</procs>
