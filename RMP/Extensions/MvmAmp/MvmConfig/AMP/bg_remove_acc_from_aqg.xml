<proc name="bg_remove_acc_from_aqg">
  <param name='child_id_acc'/>
  <param name='id_acc'/>
  <param name='account_qualification_group'/>
  <param name='boundary_group_id' mode='out'/>

  <do>TEMP.incremented_acc = 0</do>
  <do>TEMP.created_boundary_group = 0</do>

  <c>Calling add aqg to boundary group even though we're removing the account from it... It'll make sure the BG/aqg combo is ready to receive the removal</c>
  <call_proc_for_current_object>
    <name>'bg_add_aqg_to_boundary_group'</name>
    <param name='id_acc'>TEMP.id_acc</param>
    <param name='account_qualification_group'>TEMP.account_qualification_group</param>
    <param name='force_lock'>1</param>
    <param name='boundary_group_id'>TEMP.boundary_group_id</param>
  </call_proc_for_current_object>

  <if>
    <condition>TEMP.boundary_group_id ne ''</condition>
    <then>
      <db_execute>
        <login_object>GLOBAL.target_login</login_object>
        <statement>
          "update agg_boundary_group_acc_map set group_counter = (
          select count(*) from agg_boundary_group_aqg_map a
          inner join agg_aqg_map b on a.id_acc = b.id_acc and a.account_qualification_group = b.account_qualification_group and b.child_id_acc = $${TEMP.child_id_acc}
          where a.boundary_group_id = $${TEMP.boundary_group_id})
          where agg_boundary_group_acc_map.id_acc = $${TEMP.child_id_acc} and agg_boundary_group_acc_map.boundary_group_id = $${TEMP.boundary_group_id}"
        </statement>
        <num_rows>TEMP.num_rows</num_rows>
      </db_execute>
      <db_execute>
        <login_object>GLOBAL.target_login</login_object>
        <statement>
          "delete agg_boundary_group_acc_map where id_acc = $${TEMP.child_id_acc} and boundary_group_id = $${TEMP.boundary_group_id} and group_counter = 0"
        </statement>
        <num_rows>TEMP.num_rows</num_rows>
      </db_execute>
    </then>
  </if>

</proc>